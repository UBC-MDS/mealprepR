% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_recipe.R
\name{make_recipe}
\alias{make_recipe}
\title{make_recipe Documentation}
\usage{
make_recipe(X, y, recipe, splits_to_return = "train_test")
}
\arguments{
\item{X}{A dataframe containing training data, validation data, and testing data (should contain X and y).}

\item{y}{The name of the response column (as a string, e.g. "response_variable").}

\item{recipe}{A string specifying which recipe to apply to the data. See "The recipe parameter" section below for details.}

\item{splits_to_return}{A string speciying how to split the data. "train_test" to return train and test splits, "train_test_valid" to return train, test, and validation data, "train" to return all data without splits.}
}
\value{
A list of dataframes e.g. list(X_train, X_valid, X_test, y_train, y_valid, y_test)
}
\description{
The \code{make_recipe()} function is used to quickly apply common data preprocessing techniques
}
\section{The recipe parameter}{

The following recipes are available currently available to pass into the \code{recipe} parameter:
\itemize{
\item "ohe_and_standard_scaler" - Apply one hot encoding to categorical features and standard scaler to numeric features
}

More recipes are under development and will be released in future updates.
}

\examples{
# apply "ohe_and_standard_scaler" on training and testing data
X_example <- dplyr::as_tibble(mtcars) \%>\%
 dplyr::mutate(carb = as.factor(carb),
               gear = as.factor(gear),
               vs = as.factor(vs),
               am = as.factor(am))
y_example <- "gear"
make_recipe(X = X_example, y = y_example, recipe = "ohe_and_standard_scaler",splits_to_return="train_test")
}
